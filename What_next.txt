WHAT NEXT????
-------------

Known BUGS:
===========

Suspected BUGS: (needs investigation)
=====================================


Possible IMPROVEMENTS:
======================
var initGUI_Boring = function () {
var initGUI_Cellular = function () {

1) Reordering menus
'Boring' menu names
Colour (basic)
  Fill 1
  Outline 1
  Fill 2
  Outline 2
Colour (advanced)
Size & Shape
Movement
Options / Settings
Controls

The overall structure seems vastly overcomplicated!
Colour > DNA > Colour etc. SIMPLIFY IT!
Rather than each cell having their own dna, could they in theory pick up their local values directly from the genepool?
(would require the genepool being additively populated as new combinations arise, which could be ineffective, but still maybe less inefficient than 1 dna per cell)
Do I actually need the genepool once a population is running?
Maybe colours can be moved out of the DNA and inherited more directly, to improve overall efficiency?
Maybe there is a way to include a color variable directly in the DNA?

One slider per variable to determine the 'middle value'
One 'variance' to determine the amount of 'random variation' around that value, which could be 100% upto 200% (x2) or (*0.5/*2.0) or +/- 50%
+ 100% = x2
- 100% = *0.5
Variance will apply to all variables in 'DNA tweaks': startsize/endsize/lifespan/noise/twist/transparency?

I NEED A WAY TO MAKE VARIANCE RANGE EXTEND BOTH ABOVE AND BELOW THE SELECTED VALUE (WITHIN LIMITS)
MAYBE I CAN USE 'CONSTRAIN'?

Now:
Each Cell has it's own DNA.
In the initial spawn, cell DNA is picked from a set of 5 DNA in a prepopulated 'genepool' array.
In cells spawned from a conception-event, dna is recombined to make a new, unique individual (though this is not currently added to the genepool)
Gene-values for the genepool-DNA are assigned (in dna.js constructor) within limits given by variables in global_settings (& editable in the GUI)
The goal is for random variation within controllable limits (as full-scale random often results in a mess)
Currently, the limits can be specified as Min-Max but this is clumsy in the GUI (due to lack of 'from-to' slider)

I will therefore keep the 'Min' value (& slider) but add a general 'Diversity' or 'Variance' slider which affects all values across the board.
The expression of this 'variance' will be within the DNA constructor.

Do I expect there to be some degree of random variation within a strain?
If so, this will need to occur in the individual cell constructor.

>>>>> If you change the colour of a strain (A-E) then that strain is the one you spawn with next mouseclick

- gs.stepped - Is it needed, or is this covered by stepSize = 0? Should it be true to start with?
  I think I have fixed it now so it never becomes false, and all is running normally
  Remove at a later stage (in a fork)

>>REMEMBER! Scaling is important: use relative sizes IMPORTANT!!
>>REMEMBER! populateColony() does not refresh Global_settings!! (why might this be important?)

Ideas for NEW FEATURES:
=======================
+ Instead of specifying individual Strain colors, specify ANGULAR HUE OFFSET between strains?

+ Store PRESET colour settings by simply including multiple versions of gs?
If (key = '1') {gs = new Global_settings_1}
If (key = '2') {gs = new Global_settings_2}
If (key = '3') {gs = new Global_settings_3}
If (key = '4') {gs = new Global_settings_4}
To select a predefined set of global_settings

TASKS:
======
> Window resize?
> Naming convention - what are the different preset generators called?

FUTURE:
> How to go on from here towards being able to use the GUI to tweak the generators (& save presets to JSON?)
> This could potentially run as a standalone at Tomra....
